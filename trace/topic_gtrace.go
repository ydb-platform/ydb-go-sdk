// Code generated by gtrace. DO NOT EDIT.

package trace

import (
	"context"
)

// topicComposeOptions is a holder of options.
type topicComposeOptions struct {
	panicCallback func(e interface{})
}

// TopicOption specified Topic compose option.
type TopicComposeOption func(o *topicComposeOptions)

// WithTopicPanicCallback specified behavior on panic.
func WithTopicPanicCallback(cb func(e interface{})) TopicComposeOption {
	return func(o *topicComposeOptions) {
		o.panicCallback = cb
	}
}

// Compose returns a new Topic which has functional fields composed both from t and x.
func (t *Topic) Compose(x *Topic, opts ...TopicComposeOption) *Topic {
	var ret Topic
	options := topicComposeOptions{}
	for _, opt := range opts {
		if opt != nil {
			opt(&options)
		}
	}
	{
		h1 := t.OnReaderStart
		h2 := x.OnReaderStart
		ret.OnReaderStart = func(info TopicReaderStartInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(info)
			}
			if h2 != nil {
				h2(info)
			}
		}
	}
	{
		h1 := t.OnReaderReconnect
		h2 := x.OnReaderReconnect
		ret.OnReaderReconnect = func(t TopicReaderReconnectStartInfo) func(TopicReaderReconnectDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderReconnectDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicReaderReconnectDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnReaderReconnectRequest
		h2 := x.OnReaderReconnectRequest
		ret.OnReaderReconnectRequest = func(t TopicReaderReconnectRequestInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(t)
			}
			if h2 != nil {
				h2(t)
			}
		}
	}
	{
		h1 := t.OnReaderPartitionReadStartResponse
		h2 := x.OnReaderPartitionReadStartResponse
		ret.OnReaderPartitionReadStartResponse = func(t TopicReaderPartitionReadStartResponseStartInfo) func(TopicReaderPartitionReadStartResponseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderPartitionReadStartResponseDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicReaderPartitionReadStartResponseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnReaderPartitionReadStopResponse
		h2 := x.OnReaderPartitionReadStopResponse
		ret.OnReaderPartitionReadStopResponse = func(t TopicReaderPartitionReadStopResponseStartInfo) func(TopicReaderPartitionReadStopResponseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderPartitionReadStopResponseDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicReaderPartitionReadStopResponseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnReaderCommit
		h2 := x.OnReaderCommit
		ret.OnReaderCommit = func(t TopicReaderCommitStartInfo) func(TopicReaderCommitDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderCommitDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicReaderCommitDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnReaderSendCommitMessage
		h2 := x.OnReaderSendCommitMessage
		ret.OnReaderSendCommitMessage = func(t TopicReaderSendCommitMessageStartInfo) func(TopicReaderSendCommitMessageDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderSendCommitMessageDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicReaderSendCommitMessageDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnReaderCommittedNotify
		h2 := x.OnReaderCommittedNotify
		ret.OnReaderCommittedNotify = func(t TopicReaderCommittedNotifyInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(t)
			}
			if h2 != nil {
				h2(t)
			}
		}
	}
	{
		h1 := t.OnReaderClose
		h2 := x.OnReaderClose
		ret.OnReaderClose = func(t TopicReaderCloseStartInfo) func(TopicReaderCloseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderCloseDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicReaderCloseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnReaderInit
		h2 := x.OnReaderInit
		ret.OnReaderInit = func(t TopicReaderInitStartInfo) func(TopicReaderInitDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderInitDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicReaderInitDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnReaderError
		h2 := x.OnReaderError
		ret.OnReaderError = func(t TopicReaderErrorInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(t)
			}
			if h2 != nil {
				h2(t)
			}
		}
	}
	{
		h1 := t.OnReaderUpdateToken
		h2 := x.OnReaderUpdateToken
		ret.OnReaderUpdateToken = func(o OnReadUpdateTokenStartInfo) func(OnReadUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReadUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo)
			if h1 != nil {
				r = h1(o)
			}
			if h2 != nil {
				r1 = h2(o)
			}
			return func(o OnReadUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				var r2, r3 func(OnReadStreamUpdateTokenDoneInfo)
				if r != nil {
					r2 = r(o)
				}
				if r1 != nil {
					r3 = r1(o)
				}
				return func(o OnReadStreamUpdateTokenDoneInfo) {
					if options.panicCallback != nil {
						defer func() {
							if e := recover(); e != nil {
								options.panicCallback(e)
							}
						}()
					}
					if r2 != nil {
						r2(o)
					}
					if r3 != nil {
						r3(o)
					}
				}
			}
		}
	}
	{
		h1 := t.OnReaderSentDataRequest
		h2 := x.OnReaderSentDataRequest
		ret.OnReaderSentDataRequest = func(t TopicReaderSentDataRequestInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(t)
			}
			if h2 != nil {
				h2(t)
			}
		}
	}
	{
		h1 := t.OnReaderReceiveDataResponse
		h2 := x.OnReaderReceiveDataResponse
		ret.OnReaderReceiveDataResponse = func(t TopicReaderReceiveDataResponseStartInfo) func(TopicReaderReceiveDataResponseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderReceiveDataResponseDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicReaderReceiveDataResponseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnReaderReadMessages
		h2 := x.OnReaderReadMessages
		ret.OnReaderReadMessages = func(t TopicReaderReadMessagesStartInfo) func(TopicReaderReadMessagesDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderReadMessagesDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicReaderReadMessagesDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnReaderUnknownGrpcMessage
		h2 := x.OnReaderUnknownGrpcMessage
		ret.OnReaderUnknownGrpcMessage = func(o OnReadUnknownGrpcMessageInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(o)
			}
			if h2 != nil {
				h2(o)
			}
		}
	}
	{
		h1 := t.OnWriterReconnect
		h2 := x.OnWriterReconnect
		ret.OnWriterReconnect = func(t TopicWriterReconnectStartInfo) func(TopicWriterReconnectDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicWriterReconnectDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicWriterReconnectDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnWriterInitStream
		h2 := x.OnWriterInitStream
		ret.OnWriterInitStream = func(t TopicWriterInitStreamStartInfo) func(TopicWriterInitStreamDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicWriterInitStreamDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicWriterInitStreamDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnWriterClose
		h2 := x.OnWriterClose
		ret.OnWriterClose = func(t TopicWriterCloseStartInfo) func(TopicWriterCloseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicWriterCloseDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicWriterCloseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnWriterCompressMessages
		h2 := x.OnWriterCompressMessages
		ret.OnWriterCompressMessages = func(t TopicWriterCompressMessagesStartInfo) func(TopicWriterCompressMessagesDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicWriterCompressMessagesDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicWriterCompressMessagesDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnWriterSendMessages
		h2 := x.OnWriterSendMessages
		ret.OnWriterSendMessages = func(t TopicWriterSendMessagesStartInfo) func(TopicWriterSendMessagesDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicWriterSendMessagesDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TopicWriterSendMessagesDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.OnWriterReadUnknownGrpcMessage
		h2 := x.OnWriterReadUnknownGrpcMessage
		ret.OnWriterReadUnknownGrpcMessage = func(t TopicOnWriterReadUnknownGrpcMessageInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(t)
			}
			if h2 != nil {
				h2(t)
			}
		}
	}
	return &ret
}
func (t *Topic) onReaderStart(info TopicReaderStartInfo) {
	fn := t.OnReaderStart
	if fn == nil {
		return
	}
	fn(info)
}
func (t *Topic) onReaderReconnect(t1 TopicReaderReconnectStartInfo) func(TopicReaderReconnectDoneInfo) {
	fn := t.OnReaderReconnect
	if fn == nil {
		return func(TopicReaderReconnectDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicReaderReconnectDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onReaderReconnectRequest(t1 TopicReaderReconnectRequestInfo) {
	fn := t.OnReaderReconnectRequest
	if fn == nil {
		return
	}
	fn(t1)
}
func (t *Topic) onReaderPartitionReadStartResponse(t1 TopicReaderPartitionReadStartResponseStartInfo) func(TopicReaderPartitionReadStartResponseDoneInfo) {
	fn := t.OnReaderPartitionReadStartResponse
	if fn == nil {
		return func(TopicReaderPartitionReadStartResponseDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicReaderPartitionReadStartResponseDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onReaderPartitionReadStopResponse(t1 TopicReaderPartitionReadStopResponseStartInfo) func(TopicReaderPartitionReadStopResponseDoneInfo) {
	fn := t.OnReaderPartitionReadStopResponse
	if fn == nil {
		return func(TopicReaderPartitionReadStopResponseDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicReaderPartitionReadStopResponseDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onReaderCommit(t1 TopicReaderCommitStartInfo) func(TopicReaderCommitDoneInfo) {
	fn := t.OnReaderCommit
	if fn == nil {
		return func(TopicReaderCommitDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicReaderCommitDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onReaderSendCommitMessage(t1 TopicReaderSendCommitMessageStartInfo) func(TopicReaderSendCommitMessageDoneInfo) {
	fn := t.OnReaderSendCommitMessage
	if fn == nil {
		return func(TopicReaderSendCommitMessageDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicReaderSendCommitMessageDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onReaderCommittedNotify(t1 TopicReaderCommittedNotifyInfo) {
	fn := t.OnReaderCommittedNotify
	if fn == nil {
		return
	}
	fn(t1)
}
func (t *Topic) onReaderClose(t1 TopicReaderCloseStartInfo) func(TopicReaderCloseDoneInfo) {
	fn := t.OnReaderClose
	if fn == nil {
		return func(TopicReaderCloseDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicReaderCloseDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onReaderInit(t1 TopicReaderInitStartInfo) func(TopicReaderInitDoneInfo) {
	fn := t.OnReaderInit
	if fn == nil {
		return func(TopicReaderInitDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicReaderInitDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onReaderError(t1 TopicReaderErrorInfo) {
	fn := t.OnReaderError
	if fn == nil {
		return
	}
	fn(t1)
}
func (t *Topic) onReaderUpdateToken(o OnReadUpdateTokenStartInfo) func(OnReadUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
	fn := t.OnReaderUpdateToken
	if fn == nil {
		return func(OnReadUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
			return func(OnReadStreamUpdateTokenDoneInfo) {
				return
			}
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnReadUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
			return func(OnReadStreamUpdateTokenDoneInfo) {
				return
			}
		}
	}
	return func(o OnReadUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
		res := res(o)
		if res == nil {
			return func(OnReadStreamUpdateTokenDoneInfo) {
				return
			}
		}
		return res
	}
}
func (t *Topic) onReaderSentDataRequest(t1 TopicReaderSentDataRequestInfo) {
	fn := t.OnReaderSentDataRequest
	if fn == nil {
		return
	}
	fn(t1)
}
func (t *Topic) onReaderReceiveDataResponse(t1 TopicReaderReceiveDataResponseStartInfo) func(TopicReaderReceiveDataResponseDoneInfo) {
	fn := t.OnReaderReceiveDataResponse
	if fn == nil {
		return func(TopicReaderReceiveDataResponseDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicReaderReceiveDataResponseDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onReaderReadMessages(t1 TopicReaderReadMessagesStartInfo) func(TopicReaderReadMessagesDoneInfo) {
	fn := t.OnReaderReadMessages
	if fn == nil {
		return func(TopicReaderReadMessagesDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicReaderReadMessagesDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onReaderUnknownGrpcMessage(o OnReadUnknownGrpcMessageInfo) {
	fn := t.OnReaderUnknownGrpcMessage
	if fn == nil {
		return
	}
	fn(o)
}
func (t *Topic) onWriterReconnect(t1 TopicWriterReconnectStartInfo) func(TopicWriterReconnectDoneInfo) {
	fn := t.OnWriterReconnect
	if fn == nil {
		return func(TopicWriterReconnectDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicWriterReconnectDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onWriterInitStream(t1 TopicWriterInitStreamStartInfo) func(TopicWriterInitStreamDoneInfo) {
	fn := t.OnWriterInitStream
	if fn == nil {
		return func(TopicWriterInitStreamDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicWriterInitStreamDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onWriterClose(t1 TopicWriterCloseStartInfo) func(TopicWriterCloseDoneInfo) {
	fn := t.OnWriterClose
	if fn == nil {
		return func(TopicWriterCloseDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicWriterCloseDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onWriterCompressMessages(t1 TopicWriterCompressMessagesStartInfo) func(TopicWriterCompressMessagesDoneInfo) {
	fn := t.OnWriterCompressMessages
	if fn == nil {
		return func(TopicWriterCompressMessagesDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicWriterCompressMessagesDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onWriterSendMessages(t1 TopicWriterSendMessagesStartInfo) func(TopicWriterSendMessagesDoneInfo) {
	fn := t.OnWriterSendMessages
	if fn == nil {
		return func(TopicWriterSendMessagesDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TopicWriterSendMessagesDoneInfo) {
			return
		}
	}
	return res
}
func (t *Topic) onWriterReadUnknownGrpcMessage(t1 TopicOnWriterReadUnknownGrpcMessageInfo) {
	fn := t.OnWriterReadUnknownGrpcMessage
	if fn == nil {
		return
	}
	fn(t1)
}
func TopicOnReaderStart(t *Topic, readerID int64, consumer string) {
	var p TopicReaderStartInfo
	p.ReaderID = readerID
	p.Consumer = consumer
	t.onReaderStart(p)
}
func TopicOnReaderReconnect(t *Topic, reason error) func(error) {
	var p TopicReaderReconnectStartInfo
	p.Reason = reason
	res := t.onReaderReconnect(p)
	return func(e error) {
		var p TopicReaderReconnectDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderReconnectRequest(t *Topic, reason error, wasSent bool) {
	var p TopicReaderReconnectRequestInfo
	p.Reason = reason
	p.WasSent = wasSent
	t.onReaderReconnectRequest(p)
}
func TopicOnReaderPartitionReadStartResponse(t *Topic, readerConnectionID string, partitionContext context.Context, topic string, partitionID int64, partitionSessionID int64) func(readOffset *int64, commitOffset *int64, _ error) {
	var p TopicReaderPartitionReadStartResponseStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.PartitionContext = partitionContext
	p.Topic = topic
	p.PartitionID = partitionID
	p.PartitionSessionID = partitionSessionID
	res := t.onReaderPartitionReadStartResponse(p)
	return func(readOffset *int64, commitOffset *int64, e error) {
		var p TopicReaderPartitionReadStartResponseDoneInfo
		p.ReadOffset = readOffset
		p.CommitOffset = commitOffset
		p.Error = e
		res(p)
	}
}
func TopicOnReaderPartitionReadStopResponse(t *Topic, readerConnectionID string, partitionContext context.Context, topic string, partitionID int64, partitionSessionID int64, committedOffset int64, graceful bool) func(error) {
	var p TopicReaderPartitionReadStopResponseStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.PartitionContext = partitionContext
	p.Topic = topic
	p.PartitionID = partitionID
	p.PartitionSessionID = partitionSessionID
	p.CommittedOffset = committedOffset
	p.Graceful = graceful
	res := t.onReaderPartitionReadStopResponse(p)
	return func(e error) {
		var p TopicReaderPartitionReadStopResponseDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderCommit(t *Topic, requestContext context.Context, topic string, partitionID int64, partitionSessionID int64, startOffset int64, endOffset int64) func(error) {
	var p TopicReaderCommitStartInfo
	p.RequestContext = requestContext
	p.Topic = topic
	p.PartitionID = partitionID
	p.PartitionSessionID = partitionSessionID
	p.StartOffset = startOffset
	p.EndOffset = endOffset
	res := t.onReaderCommit(p)
	return func(e error) {
		var p TopicReaderCommitDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderSendCommitMessage(t *Topic, commitsInfo TopicReaderStreamSendCommitMessageStartMessageInfo) func(error) {
	var p TopicReaderSendCommitMessageStartInfo
	p.CommitsInfo = commitsInfo
	res := t.onReaderSendCommitMessage(p)
	return func(e error) {
		var p TopicReaderSendCommitMessageDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderCommittedNotify(t *Topic, readerConnectionID string, topic string, partitionID int64, partitionSessionID int64, committedOffset int64) {
	var p TopicReaderCommittedNotifyInfo
	p.ReaderConnectionID = readerConnectionID
	p.Topic = topic
	p.PartitionID = partitionID
	p.PartitionSessionID = partitionSessionID
	p.CommittedOffset = committedOffset
	t.onReaderCommittedNotify(p)
}
func TopicOnReaderClose(t *Topic, readerConnectionID string, closeReason error) func(closeError error) {
	var p TopicReaderCloseStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.CloseReason = closeReason
	res := t.onReaderClose(p)
	return func(closeError error) {
		var p TopicReaderCloseDoneInfo
		p.CloseError = closeError
		res(p)
	}
}
func TopicOnReaderInit(t *Topic, preInitReaderConnectionID string, initRequestInfo TopicReadStreamInitRequestInfo) func(readerConnectionID string, _ error) {
	var p TopicReaderInitStartInfo
	p.PreInitReaderConnectionID = preInitReaderConnectionID
	p.InitRequestInfo = initRequestInfo
	res := t.onReaderInit(p)
	return func(readerConnectionID string, e error) {
		var p TopicReaderInitDoneInfo
		p.ReaderConnectionID = readerConnectionID
		p.Error = e
		res(p)
	}
}
func TopicOnReaderError(t *Topic, readerConnectionID string, e error) {
	var p TopicReaderErrorInfo
	p.ReaderConnectionID = readerConnectionID
	p.Error = e
	t.onReaderError(p)
}
func TopicOnReaderUpdateToken(t *Topic, readerConnectionID string) func(tokenLen int, _ error) func(error) {
	var p OnReadUpdateTokenStartInfo
	p.ReaderConnectionID = readerConnectionID
	res := t.onReaderUpdateToken(p)
	return func(tokenLen int, e error) func(error) {
		var p OnReadUpdateTokenMiddleTokenReceivedInfo
		p.TokenLen = tokenLen
		p.Error = e
		res := res(p)
		return func(e error) {
			var p OnReadStreamUpdateTokenDoneInfo
			p.Error = e
			res(p)
		}
	}
}
func TopicOnReaderSentDataRequest(t *Topic, readerConnectionID string, requestBytes int, localBufferSizeAfterSent int) {
	var p TopicReaderSentDataRequestInfo
	p.ReaderConnectionID = readerConnectionID
	p.RequestBytes = requestBytes
	p.LocalBufferSizeAfterSent = localBufferSizeAfterSent
	t.onReaderSentDataRequest(p)
}
func TopicOnReaderReceiveDataResponse(t *Topic, readerConnectionID string, localBufferSizeAfterReceive int, dataResponse TopicReaderDataResponseInfo) func(error) {
	var p TopicReaderReceiveDataResponseStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.LocalBufferSizeAfterReceive = localBufferSizeAfterReceive
	p.DataResponse = dataResponse
	res := t.onReaderReceiveDataResponse(p)
	return func(e error) {
		var p TopicReaderReceiveDataResponseDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderReadMessages(t *Topic, requestContext context.Context, minCount int, maxCount int, freeBufferCapacity int) func(messagesCount int, topic string, partitionID int64, partitionSessionID int64, offsetStart int64, offsetEnd int64, freeBufferCapacity int, _ error) {
	var p TopicReaderReadMessagesStartInfo
	p.RequestContext = requestContext
	p.MinCount = minCount
	p.MaxCount = maxCount
	p.FreeBufferCapacity = freeBufferCapacity
	res := t.onReaderReadMessages(p)
	return func(messagesCount int, topic string, partitionID int64, partitionSessionID int64, offsetStart int64, offsetEnd int64, freeBufferCapacity int, e error) {
		var p TopicReaderReadMessagesDoneInfo
		p.MessagesCount = messagesCount
		p.Topic = topic
		p.PartitionID = partitionID
		p.PartitionSessionID = partitionSessionID
		p.OffsetStart = offsetStart
		p.OffsetEnd = offsetEnd
		p.FreeBufferCapacity = freeBufferCapacity
		p.Error = e
		res(p)
	}
}
func TopicOnReaderUnknownGrpcMessage(t *Topic, readerConnectionID string, e error) {
	var p OnReadUnknownGrpcMessageInfo
	p.ReaderConnectionID = readerConnectionID
	p.Error = e
	t.onReaderUnknownGrpcMessage(p)
}
func TopicOnWriterReconnect(t *Topic, writerInstanceID string, topic string, producerID string, attempt int) func(error) {
	var p TopicWriterReconnectStartInfo
	p.WriterInstanceID = writerInstanceID
	p.Topic = topic
	p.ProducerID = producerID
	p.Attempt = attempt
	res := t.onWriterReconnect(p)
	return func(e error) {
		var p TopicWriterReconnectDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnWriterInitStream(t *Topic, writerInstanceID string, topic string, producerID string) func(sessionID string, _ error) {
	var p TopicWriterInitStreamStartInfo
	p.WriterInstanceID = writerInstanceID
	p.Topic = topic
	p.ProducerID = producerID
	res := t.onWriterInitStream(p)
	return func(sessionID string, e error) {
		var p TopicWriterInitStreamDoneInfo
		p.SessionID = sessionID
		p.Error = e
		res(p)
	}
}
func TopicOnWriterClose(t *Topic, writerInstanceID string, reason error) func(error) {
	var p TopicWriterCloseStartInfo
	p.WriterInstanceID = writerInstanceID
	p.Reason = reason
	res := t.onWriterClose(p)
	return func(e error) {
		var p TopicWriterCloseDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnWriterCompressMessages(t *Topic, writerInstanceID string, sessionID string, codec int32, firstSeqNo int64, messagesCount int, reason TopicWriterCompressMessagesReason) func(error) {
	var p TopicWriterCompressMessagesStartInfo
	p.WriterInstanceID = writerInstanceID
	p.SessionID = sessionID
	p.Codec = codec
	p.FirstSeqNo = firstSeqNo
	p.MessagesCount = messagesCount
	p.Reason = reason
	res := t.onWriterCompressMessages(p)
	return func(e error) {
		var p TopicWriterCompressMessagesDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnWriterSendMessages(t *Topic, writerInstanceID string, sessionID string, codec int32, firstSeqNo int64, messagesCount int) func(error) {
	var p TopicWriterSendMessagesStartInfo
	p.WriterInstanceID = writerInstanceID
	p.SessionID = sessionID
	p.Codec = codec
	p.FirstSeqNo = firstSeqNo
	p.MessagesCount = messagesCount
	res := t.onWriterSendMessages(p)
	return func(e error) {
		var p TopicWriterSendMessagesDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnWriterReadUnknownGrpcMessage(t *Topic, writerInstanceID string, sessionID string, e error) {
	var p TopicOnWriterReadUnknownGrpcMessageInfo
	p.WriterInstanceID = writerInstanceID
	p.SessionID = sessionID
	p.Error = e
	t.onWriterReadUnknownGrpcMessage(p)
}
