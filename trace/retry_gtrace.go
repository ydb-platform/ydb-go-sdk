// Code generated by gtrace. DO NOT EDIT.

// nolint:revive
package ydb_trace

import (
	"context"
	"time"
)

// Compose returns a new Retry which has functional fields composed
// both from t and x.
func (t Retry) Compose(x Retry) (ret Retry) {
	switch {
	case t.OnRetry == nil:
		ret.OnRetry = x.OnRetry
	case x.OnRetry == nil:
		ret.OnRetry = t.OnRetry
	default:
		h1 := t.OnRetry
		h2 := x.OnRetry
		ret.OnRetry = func(r RetryLoopStartInfo) func(RetryLoopDoneInfo) {
			r1 := h1(r)
			r2 := h2(r)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(r RetryLoopDoneInfo) {
					r1(r)
					r2(r)
				}
			}
		}
	}
	return ret
}
func (t Retry) onRetry(r RetryLoopStartInfo) func(RetryLoopDoneInfo) {
	fn := t.OnRetry
	if fn == nil {
		return func(RetryLoopDoneInfo) {
			return
		}
	}
	res := fn(r)
	if res == nil {
		return func(RetryLoopDoneInfo) {
			return
		}
	}
	return res
}
func RetryOnRetry(t Retry, c context.Context) func(_ context.Context, latency time.Duration, err error) {
	var p RetryLoopStartInfo
	p.Context = c
	res := t.onRetry(p)
	return func(c context.Context, latency time.Duration, err error) {
		var p RetryLoopDoneInfo
		p.Context = c
		p.Latency = latency
		p.Err = err
		res(p)
	}
}
